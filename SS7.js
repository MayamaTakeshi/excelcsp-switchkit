const tester_magic = require('./tester_magic.js');

const SS7 = {
    Message: {
        ACM: tester_magic.generate(0x6, "ACM", "SS7.Message.ACM"),
        CRM: tester_magic.generate(0xEA, "CRM", "SS7.Message.CRM"),
        OLM: tester_magic.generate(0x30, "OLM", "SS7.Message.OLM"),
        ANM: tester_magic.generate(0x9, "ANM", "SS7.Message.ANM"),
        CVR: tester_magic.generate(0xEB, "CVR", "SS7.Message.CVR"),
        OPR: tester_magic.generate(0xFE, "OPR", "SS7.Message.OPR"),
        APM: tester_magic.generate(0x41, "APM", "SS7.Message.APM"),
        CVT: tester_magic.generate(0xEC, "CVT", "SS7.Message.CVT"),
        PAM: tester_magic.generate(0x28, "PAM", "SS7.Message.PAM"),
        BLA: tester_magic.generate(0x15, "BLA", "SS7.Message.BLA"),
        DRS: tester_magic.generate(0x27, "DRS", "SS7.Message.DRS"),
        PRI: tester_magic.generate(0x42, "PRI", "SS7.Message.PRI"),
        BLO: tester_magic.generate(0x13, "BLO", "SS7.Message.BLO"),
        EXM: tester_magic.generate(0xED, "EXM", "SS7.Message.EXM"),
        REL: tester_magic.generate(0xC, "REL", "SS7.Message.REL"),
        CCL: tester_magic.generate(0xFC, "CCL", "SS7.Message.CCL"),
        FAA: tester_magic.generate(0x20, "FAA", "SS7.Message.FAA"),
        RES: tester_magic.generate(0xE, "RES", "SS7.Message.RES"),
        CFN: tester_magic.generate(0x2F, "CFN", "SS7.Message.CFN"),
        FAC: tester_magic.generate(0x33, "FAC", "SS7.Message.FAC"),
        RLC: tester_magic.generate(0x10, "RLC", "SS7.Message.RLC"),
        CGB: tester_magic.generate(0x18, "CGB", "SS7.Message.CGB"),
        FAR: tester_magic.generate(0x1F, "FAR", "SS7.Message.FAR"),
        RSC: tester_magic.generate(0x12, "RSC", "SS7.Message.RSC"),
        GBA: tester_magic.generate(0x1A, "GBA", "SS7.Message.GBA"),
        FOT: tester_magic.generate(0x8, "FOT", "SS7.Message.FOT"),
        SAM: tester_magic.generate(0x2, "SAM", "SS7.Message.SAM"),
        CGU: tester_magic.generate(0x19, "CGU", "SS7.Message.CGU"),
        FRJ: tester_magic.generate(0x21, "FRJ", "SS7.Message.FRJ"),
        SGM: tester_magic.generate(0x38, "SGM", "SS7.Message.SGM"),
        GUA: tester_magic.generate(0x1B, "GUA", "SS7.Message.GUA"),
        GRA: tester_magic.generate(0x29, "GRA", "SS7.Message.GRA"),
        SUS: tester_magic.generate(0xD, "SUS", "SS7.Message.SUS"),
        CON: tester_magic.generate(0x7, "CON", "SS7.Message.CON"),
        GRS: tester_magic.generate(0x17, "GRS", "SS7.Message.GRS"),
        UBA: tester_magic.generate(0x16, "UBA", "SS7.Message.UBA"),
        CMC: tester_magic.generate(0x49, "CMC", "SS7.Message.CMC"),
        IAM: tester_magic.generate(0x1, "IAM", "SS7.Message.IAM"),
        UBL: tester_magic.generate(0x14, "UBL", "SS7.Message.UBL"),
        MRJ: tester_magic.generate(0x4A, "MRJ", "SS7.Message.MRJ"),
        IDR: tester_magic.generate(0x36, "IDR", "SS7.Message.IDR"),
        CIC: tester_magic.generate(0x2E, "CIC", "SS7.Message.CIC"),
        CMR: tester_magic.generate(0x4B, "CMR", "SS7.Message.CMR"),
        INF: tester_magic.generate(0x4, "INF", "SS7.Message.INF"),
        UPA: tester_magic.generate(0x35, "UPA", "SS7.Message.UPA"),
        CPG: tester_magic.generate(0x2C, "CPG", "SS7.Message.CPG"),
        INR: tester_magic.generate(0x3, "INR", "SS7.Message.INR"),
        UPT: tester_magic.generate(0x34, "UPT", "SS7.Message.UPT"),
        CQM: tester_magic.generate(0x2A, "CQM", "SS7.Message.CQM"),
        IRS: tester_magic.generate(0x37, "IRS", "SS7.Message.IRS"),
        USR: tester_magic.generate(0x2D, "USR", "SS7.Message.USR"),
        CQR: tester_magic.generate(0x2B, "CQR", "SS7.Message.CQR"),
        LOP: tester_magic.generate(0x40, "LOP", "SS7.Message.LOP"),
        CRA: tester_magic.generate(0xE9, "CRA", "SS7.Message.CRA"),
        MPM: tester_magic.generate(0xFD, "MPM", "SS7.Message.MPM"),
        CRG: tester_magic.generate(0x31, "CRG", "SS7.Message.CRG"),
        NRM: tester_magic.generate(0x32, "NRM", "SS7.Message.NRM"),
        CHG: tester_magic.generate(0xFE, "CHG", "SS7.Message.CHG"),
    },
    Parameter: {
        Access_delivery_information: tester_magic.generate(46, "Access_delivery_information", "SS7.Parameter.Access_delivery_information"),
        Access_transport: tester_magic.generate(3, "Access_transport", "SS7.Parameter.Access_transport"),
        Application_transport: tester_magic.generate(120, "Application_transport", "SS7.Parameter.Application_transport"),
        Automatic_congestion_level: tester_magic.generate(39, "Automatic_congestion_level", "SS7.Parameter.Automatic_congestion_level"),
        Backward_call_indicators: tester_magic.generate(17, "Backward_call_indicators", "SS7.Parameter.Backward_call_indicators"),
        Backward_GVNS: tester_magic.generate(77, "Backward_GVNS", "SS7.Parameter.Backward_GVNS"),
        Call_diversion_information: tester_magic.generate(54, "Call_diversion_information", "SS7.Parameter.Call_diversion_information"),
        Call_diversion_treatment_indicators: tester_magic.generate(110, "Call_diversion_treatment_indicators", "SS7.Parameter.Call_diversion_treatment_indicators"),
        Call_history_information: tester_magic.generate(45, "Call_history_information", "SS7.Parameter.Call_history_information"),
        Call_offering_treatment_indicators: tester_magic.generate(112, "Call_offering_treatment_indicators", "SS7.Parameter.Call_offering_treatment_indicators"),
        Call_reference: tester_magic.generate(1, "Call_reference", "SS7.Parameter.Call_reference"),
        Call_transfer_number: tester_magic.generate(69, "Call_transfer_number", "SS7.Parameter.Call_transfer_number"),
        Call_transfer_reference: tester_magic.generate(67, "Call_transfer_reference", "SS7.Parameter.Call_transfer_reference"),
        Called_IN_number: tester_magic.generate(111, "Called_IN_number", "SS7.Parameter.Called_IN_number"),
        Called_directory_number: tester_magic.generate(125, "Called_directory_number", "SS7.Parameter.Called_directory_number", "ss7_parameter_called_directory_number"),
        Called_party_number: tester_magic.generate(4, "Called_party_number", "SS7.Parameter.Called_party_number", "ss7_parameter_called_party_number"),
        Calling_geodetic_location: tester_magic.generate(129, "Calling_geodetic_location", "SS7.Parameter.Calling_geodetic_location"),
        Calling_party_number: tester_magic.generate(10, "Calling_party_number", "SS7.Parameter.Calling_party_number", "ss7_parameter_calling_party_number"),
        Calling_partys_category: tester_magic.generate(9, "Calling_partys_category", "SS7.Parameter.Calling_partys_category"),
        Cause_indicators: tester_magic.generate(18, "Cause_indicators", "SS7.Parameter.Cause_indicators", "switchkit_ss7_parameter_cause_indicators"),
        CCNR_possible_indicator: tester_magic.generate(122, "CCNR_possible_indicator", "SS7.Parameter.CCNR_possible_indicator"),
        CCSS: tester_magic.generate(75, "CCSS", "SS7.Parameter.CCSS"),
        Charged_party_identification: tester_magic.generate(113, "Charged_party_identification", "SS7.Parameter.Charged_party_identification"),
        Circuit_assignment_map: tester_magic.generate(37, "Circuit_assignment_map", "SS7.Parameter.Circuit_assignment_map"),
        Circuit_group_supervision_message_type: tester_magic.generate(21, "Circuit_group_supervision_message_type", "SS7.Parameter.Circuit_group_supervision_message_type"),
        Circuit_state_indicator: tester_magic.generate(38, "Circuit_state_indicator", "SS7.Parameter.Circuit_state_indicator"),
        Closed_user_group_interlock_code: tester_magic.generate(26, "Closed_user_group_interlock_code", "SS7.Parameter.Closed_user_group_interlock_code"),
        Collect_call_request: tester_magic.generate(121, "Collect_call_request", "SS7.Parameter.Collect_call_request"),
        Conference_treatment_indicators: tester_magic.generate(114, "Conference_treatment_indicators", "SS7.Parameter.Conference_treatment_indicators"),
        Connected_number: tester_magic.generate(33, "Connected_number", "SS7.Parameter.Connected_number"),
        Connection_request: tester_magic.generate(13, "Connection_request", "SS7.Parameter.Connection_request"),
        Continuity_indicators: tester_magic.generate(16, "Continuity_indicators", "SS7.Parameter.Continuity_indicators"),
        Correlation_id: tester_magic.generate(101, "Correlation_id", "SS7.Parameter.Correlation_id"),
        Display_information: tester_magic.generate(115, "Display_information", "SS7.Parameter.Display_information"),
        Echo_control_information: tester_magic.generate(55, "Echo_control_information", "SS7.Parameter.Echo_control_information"),
        End_of_optional_parameters: tester_magic.generate(0, "End_of_optional_parameters", "SS7.Parameter.End_of_optional_parameters"),
        Event_information: tester_magic.generate(36, "Event_information", "SS7.Parameter.Event_information"),
        Facility_indicator: tester_magic.generate(24, "Facility_indicator", "SS7.Parameter.Facility_indicator"),
        Forward_call_indicators: tester_magic.generate(7, "Forward_call_indicators", "SS7.Parameter.Forward_call_indicators"),
        Forward_GVNS: tester_magic.generate(76, "Forward_GVNS", "SS7.Parameter.Forward_GVNS"),
        Generic_digits: tester_magic.generate(193, "Generic_digits", "SS7.Parameter.Generic_digits"),
        Generic_notification_indicator: tester_magic.generate(44, "Generic_notification_indicator", "SS7.Parameter.Generic_notification_indicator"),
        Generic_number: tester_magic.generate(192, "Generic_number", "SS7.Parameter.Generic_number", "ss7_parameter_generic_number"),
        HTR_information: tester_magic.generate(130, "HTR_information", "SS7.Parameter.HTR_information"),
        Hop_counter: tester_magic.generate(61, "Hop_counter", "SS7.Parameter.Hop_counter"),
        Information_indicators: tester_magic.generate(15, "Information_indicators", "SS7.Parameter.Information_indicators"),
        Information_request_indicators: tester_magic.generate(14, "Information_request_indicators", "SS7.Parameter.Information_request_indicators"),
        Location_number: tester_magic.generate(63, "Location_number", "SS7.Parameter.Location_number"),
        Loop_prevention_indicators: tester_magic.generate(68, "Loop_prevention_indicators", "SS7.Parameter.Loop_prevention_indicators"),
        MCID_request_indicators: tester_magic.generate(59, "MCID_request_indicators", "SS7.Parameter.MCID_request_indicators"),
        MCID_response_indicators: tester_magic.generate(60, "MCID_response_indicators", "SS7.Parameter.MCID_response_indicators"),
        Message_compatibility_information: tester_magic.generate(56, "Message_compatibility_information", "SS7.Parameter.Message_compatibility_information"),
        MLPP_precedence: tester_magic.generate(58, "MLPP_precedence", "SS7.Parameter.MLPP_precedence"),
        Nature_of_connection_indicators: tester_magic.generate(6, "Nature_of_connection_indicators", "SS7.Parameter.Nature_of_connection_indicators"),
        Network_management_controls: tester_magic.generate(91, "Network_management_controls", "SS7.Parameter.Network_management_controls"),
        Network_routing_number: tester_magic.generate(132, "Network_routing_number", "SS7.Parameter.Network_routing_number"),
        Network_specific_facility: tester_magic.generate(47, "Network_specific_facility", "SS7.Parameter.Network_specific_facility"),
        Number_portability_forward_information: tester_magic.generate(141, "Number_portability_forward_information", "SS7.Parameter.Number_portability_forward_information"),
        Optional_backward_call_indicators: tester_magic.generate(41, "Optional_backward_call_indicators", "SS7.Parameter.Optional_backward_call_indicators"),
        Optional_forward_call_indicators: tester_magic.generate(8, "Optional_forward_call_indicators", "SS7.Parameter.Optional_forward_call_indicators"),
        Original_called_number: tester_magic.generate(40, "Original_called_number", "SS7.Parameter.Original_called_number", "ss7_parameter_original_called_number"),
        Original_called_IN_number: tester_magic.generate(127, "Original_called_IN_number", "SS7.Parameter.Original_called_IN_number"),
        Origination_ISC_point_code: tester_magic.generate(43, "Origination_ISC_point_code", "SS7.Parameter.Origination_ISC_point_code"),
        Parameter_compatibility_information: tester_magic.generate(57, "Parameter_compatibility_information", "SS7.Parameter.Parameter_compatibility_information"),
        Pivot_capability: tester_magic.generate(123, "Pivot_capability", "SS7.Parameter.Pivot_capability"),
        Pivot_counter: tester_magic.generate(135, "Pivot_counter", "SS7.Parameter.Pivot_counter"),
        Pivot_routing_backward_information: tester_magic.generate(137, "Pivot_routing_backward_information", "SS7.Parameter.Pivot_routing_backward_information"),
        Pivot_routing_forward_information: tester_magic.generate(136, "Pivot_routing_forward_information", "SS7.Parameter.Pivot_routing_forward_information"),
        Pivot_routing_indicators: tester_magic.generate(124, "Pivot_routing_indicators", "SS7.Parameter.Pivot_routing_indicators"),
        Pivot_status: tester_magic.generate(134, "Pivot_status", "SS7.Parameter.Pivot_status"),
        Propagation_delay_counter: tester_magic.generate(49, "Propagation_delay_counter", "SS7.Parameter.Propagation_delay_counter"),
        Query_on_release_capability: tester_magic.generate(133, "Query_on_release_capability", "SS7.Parameter.Query_on_release_capability"),
        Range_and_status: tester_magic.generate(22, "Range_and_status", "SS7.Parameter.Range_and_status"),
        Redirect_backward_information: tester_magic.generate(140, "Redirect_backward_information", "SS7.Parameter.Redirect_backward_information"),
        Redirect_capability: tester_magic.generate(78, "Redirect_capability", "SS7.Parameter.Redirect_capability"),
        Redirect_counter: tester_magic.generate(119, "Redirect_counter", "SS7.Parameter.Redirect_counter"),
        Redirect_forward_information: tester_magic.generate(139, "Redirect_forward_information", "SS7.Parameter.Redirect_forward_information"),
        Redirect_status: tester_magic.generate(138, "Redirect_status", "SS7.Parameter.Redirect_status"),
        Redirecting_number: tester_magic.generate(11, "Redirecting_number", "SS7.Parameter.Redirecting_number", "ss7_parameter_redirecting_number"),
        Redirection_information: tester_magic.generate(19, "Redirection_information", "SS7.Parameter.Redirection_information"),
        Redirection_number: tester_magic.generate(12, "Redirection_number", "SS7.Parameter.Redirection_number"),
        Redirection_number_restriction: tester_magic.generate(64, "Redirection_number_restriction", "SS7.Parameter.Redirection_number_restriction"),
        Remote_operations: tester_magic.generate(50, "Remote_operations", "SS7.Parameter.Remote_operations"),
        SCF_id: tester_magic.generate(102, "SCF_id", "SS7.Parameter.SCF_id"),
        Service_activation: tester_magic.generate(51, "Service_activation", "SS7.Parameter.Service_activation"),
        Signalling_point_code: tester_magic.generate(30, "Signalling_point_code", "SS7.Parameter.Signalling_point_code"),
        Subsequent_number: tester_magic.generate(5, "Subsequent_number", "SS7.Parameter.Subsequent_number"),
        Suspend_Resume_indicators: tester_magic.generate(34, "Suspend_Resume_indicators", "SS7.Parameter.Suspend_Resume_indicators"),
        Transit_network_selection: tester_magic.generate(35, "Transit_network_selection", "SS7.Parameter.Transit_network_selection"),
        Transmission_medium_requirement: tester_magic.generate(2, "Transmission_medium_requirement", "SS7.Parameter.Transmission_medium_requirement"),
        Transmission_medium_requirement_prime: tester_magic.generate(62, "Transmission_medium_requirement_prime", "SS7.Parameter.Transmission_medium_requirement_prime"),
        Transmission_medium_used: tester_magic.generate(53, "Transmission_medium_used", "SS7.Parameter.Transmission_medium_used"),
        UID_action_indicators: tester_magic.generate(116, "UID_action_indicators", "SS7.Parameter.UID_action_indicators"),
        UID_capability_indicators: tester_magic.generate(117, "UID_capability_indicators", "SS7.Parameter.UID_capability_indicators"),
        User_service_information: tester_magic.generate(29, "User_service_information", "SS7.Parameter.User_service_information"),
        User_service_information_prime: tester_magic.generate(48, "User_service_information_prime", "SS7.Parameter.User_service_information_prime"),
        User_teleservice_information: tester_magic.generate(52, "User_teleservice_information", "SS7.Parameter.User_teleservice_information"),
        User_to_user_indicators: tester_magic.generate(42, "User_to_user_indicators", "SS7.Parameter.User_to_user_indicators"),
        User_to_user_information: tester_magic.generate(32, "User_to_user_information", "SS7.Parameter.User_to_user_information"),
        Charge_Area_Information: tester_magic.generate(0xFD, "Charge_Area_Information", "SS7.Parameter.Charge_Area_Information"),
        Additional_Partys_Category: tester_magic.generate(0xF3, "Additional_Partys_Category", "SS7.Parameter.Additional_Partys_Category"),
        Cause_Of_No_ID: tester_magic.generate(0xF5, "Cause_Of_No_ID", "SS7.Parameter.Cause_Of_No_ID"),
        Carrier_Information_Transfer: tester_magic.generate(0xF1, "Carrier_Information_Transfer", "SS7.Parameter.Carrier_Information_Transfer"),
        Carrier_Information_Name: tester_magic.generate(0xFB, "Carrier_Information_Name", "SS7.Parameter.Carrier_Information_Name"),
    },
    NatureOfAddressIndicator: {
        National_Number: tester_magic.generate(3, "National_Number", "SS7.NatureOfAddressIndicator.National_Number"),
        International_Number: tester_magic.generate(4, "International_Number", "SS7.NatureOfAddressIndicator.International_Number"),
        Specific_Number: tester_magic.generate(5, "Specific_Number", "SS7.NatureOfAddressIndicator.Specific_Number"),
        Network_Specific: tester_magic.generate(126, "Network_Specific", "SS7.NatureOfAddressIndicator.Network_Specific"),
    },
    INN_Indicator: {
        Routing_to_allowed_network: tester_magic.generate(0, "Routing_to_allowed_network", "SS7.INN_Indicator.Routing_to_allowed_network"),
    },
    NumberingPlanIndicator: {
        ISDN_numbering_plan: tester_magic.generate(1, "ISDN_numbering_plan", "SS7.NumberingPlanIndicator.ISDN_numbering_plan"),
    },
    CallingPartyNumberIncompleteIndicator: {
        Complete: tester_magic.generate(0, "Complete", "SS7.CallingPartyNumberIncompleteIndicator.Complete"),
    },
    PresentationRestrictionIndicator: {
        Presentation_permitted: tester_magic.generate(0, "Presentation_permitted", "SS7.PresentationRestrictionIndicator.Presentation_permitted"),
        Presentation_not_permitted: tester_magic.generate(1, "Presentation_not_permitted", "SS7.PresentationRestrictionIndicator.Presentation_not_permitted"),
    },
    ScreeningIndicator: {
        Network_applied: tester_magic.generate(2, "Network_applied", "SS7.ScreeningIndicator.Network_applied"),
        User_applied: tester_magic.generate(1, "User_applied", "SS7.ScreeningIndicator.User_applied"),
    },
    Location: {
        user: tester_magic.generate(0, "user", "SS7.Location.user"),
        private_network_serving_the_local_user: tester_magic.generate(1, "private_network_serving_the_local_user", "SS7.Location.private_network_serving_the_local_user"),
        public_network_serving_the_local_user: tester_magic.generate(2, "public_network_serving_the_local_user", "SS7.Location.public_network_serving_the_local_user"),
        transit_network: tester_magic.generate(3, "transit_network", "SS7.Location.transit_network"),
        public_network_serving_the_remote_user: tester_magic.generate(4, "public_network_serving_the_remote_user", "SS7.Location.public_network_serving_the_remote_user"),
        private_network_serving_the_remote_user: tester_magic.generate(5, "private_network_serving_the_remote_user", "SS7.Location.private_network_serving_the_remote_user"),
        international_network: tester_magic.generate(7, "international_network", "SS7.Location.international_network"),
        network_beyond_interworking_point: tester_magic.generate(10, "network_beyond_interworking_point", "SS7.Location.network_beyond_interworking_point"),
    },
};

Object.values(SS7).forEach(obj => {
    Object.values(obj).forEach(magicObj => {
        obj[magicObj.id] = magicObj;
    });
});

function createProxy(obj, path = 'SS7') {
    return new Proxy(obj, {
        get(target, prop) {
            if (prop in target) {
                const value = target[prop];
                if (typeof value === 'object' && value !== null && !value.__tester_magic__) {
                    return createProxy(value, `${path}.${String(prop)}`);
                }
                return value;
            } else {
                throw new Error(`${path}.${String(prop)} is invalid`);
            }
        }
    });
}

module.exports = createProxy(SS7);