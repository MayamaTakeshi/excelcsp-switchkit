const tester_magic = require('./tester_magic.js');

const ISDN = {
    MessageType: {
        ALERTING: tester_magic.generate(0x1, "ALERTING", "ISDN.MessageType.ALERTING"),
        CALL_PROCEEDING: tester_magic.generate(0x2, "CALL_PROCEEDING", "ISDN.MessageType.CALL_PROCEEDING"),
        CONGESTION_CONTROL: tester_magic.generate(0x171, "CONGESTION_CONTROL", "ISDN.MessageType.CONGESTION_CONTROL"),
        CONNECT_ACKNOWLEDGE: tester_magic.generate(0x17, "CONNECT_ACKNOWLEDGE", "ISDN.MessageType.CONNECT_ACKNOWLEDGE"),
        CONNECT: tester_magic.generate(0x7, "CONNECT", "ISDN.MessageType.CONNECT"),
        DISCONNECT: tester_magic.generate(0x105, "DISCONNECT", "ISDN.MessageType.DISCONNECT"),
        INFORMATION: tester_magic.generate(0x173, "INFORMATION", "ISDN.MessageType.INFORMATION"),
        NOTIFY: tester_magic.generate(0x156, "NOTIFY", "ISDN.MessageType.NOTIFY"),
        PROGRESS: tester_magic.generate(0x3, "PROGRESS", "ISDN.MessageType.PROGRESS"),
        RELEASE_COMPLETE: tester_magic.generate(0x132, "RELEASE_COMPLETE", "ISDN.MessageType.RELEASE_COMPLETE"),
        RELEASE: tester_magic.generate(0x115, "RELEASE", "ISDN.MessageType.RELEASE"),
        RESTART_ACKNOWLEDGE: tester_magic.generate(0x116, "RESTART_ACKNOWLEDGE", "ISDN.MessageType.RESTART_ACKNOWLEDGE"),
        RESTART: tester_magic.generate(0x106, "RESTART", "ISDN.MessageType.RESTART"),
        RESUME_ACKNOWLEDGE: tester_magic.generate(0x56, "RESUME_ACKNOWLEDGE", "ISDN.MessageType.RESUME_ACKNOWLEDGE"),
        RESUME_REJECT: tester_magic.generate(0x42, "RESUME_REJECT", "ISDN.MessageType.RESUME_REJECT"),
        RESUME: tester_magic.generate(0x46, "RESUME", "ISDN.MessageType.RESUME"),
        SEGMENT: tester_magic.generate(0x140, "SEGMENT", "ISDN.MessageType.SEGMENT"),
        SETUP_ACKNOWLEDGE: tester_magic.generate(0x15, "SETUP_ACKNOWLEDGE", "ISDN.MessageType.SETUP_ACKNOWLEDGE"),
        SETUP: tester_magic.generate(0x5, "SETUP", "ISDN.MessageType.SETUP"),
        STATUS_ENQUIRY: tester_magic.generate(0x165, "STATUS_ENQUIRY", "ISDN.MessageType.STATUS_ENQUIRY"),
        STATUS: tester_magic.generate(0x175, "STATUS", "ISDN.MessageType.STATUS"),
        SUSPEND_ACKNOWLEDGE: tester_magic.generate(0x55, "SUSPEND_ACKNOWLEDGE", "ISDN.MessageType.SUSPEND_ACKNOWLEDGE"),
        SUSPEND_REJECT: tester_magic.generate(0x41, "SUSPEND_REJECT", "ISDN.MessageType.SUSPEND_REJECT"),
        SUSPEND: tester_magic.generate(0x45, "SUSPEND", "ISDN.MessageType.SUSPEND"),
        USER_INFORMATION: tester_magic.generate(0x40, "USER_INFORMATION", "ISDN.MessageType.USER_INFORMATION"),
    },
    InformationElement: {
        Segmented_message: tester_magic.generate(0x0, "Segmented_message", "ISDN.InformationElement.Segmented_message"),
        Bearer_capability: tester_magic.generate(0x4, "Bearer_capability", "ISDN.InformationElement.Bearer_capability"),
        Channel_id: tester_magic.generate(0x18, "Channel_id", "ISDN.InformationElement.Channel_id"),
        Cause: tester_magic.generate(0x10, "Cause", "ISDN.InformationElement.Cause"),
        Call_identity: tester_magic.generate(0x20, "Call_identity", "ISDN.InformationElement.Call_identity"),
        Call_state: tester_magic.generate(0x24, "Call_state", "ISDN.InformationElement.Call_state"),
        Channel_identification: tester_magic.generate(0x30, "Channel_identification", "ISDN.InformationElement.Channel_identification"),
        Progress_indicator: tester_magic.generate(0x36, "Progress_indicator", "ISDN.InformationElement.Progress_indicator"),
        Network_specific_facilities: tester_magic.generate(0x40, "Network_specific_facilities", "ISDN.InformationElement.Network_specific_facilities"),
        Notification_indicator: tester_magic.generate(0x47, "Notification_indicator", "ISDN.InformationElement.Notification_indicator"),
        Display: tester_magic.generate(0x50, "Display", "ISDN.InformationElement.Display"),
        Date_time: tester_magic.generate(0x51, "Date_time", "ISDN.InformationElement.Date_time"),
        Keypad_facility: tester_magic.generate(0x54, "Keypad_facility", "ISDN.InformationElement.Keypad_facility"),
        Signal: tester_magic.generate(0x64, "Signal", "ISDN.InformationElement.Signal"),
        Information: tester_magic.generate(0x100, "Information", "ISDN.InformationElement.Information"),
        End_to_end_transit_delay: tester_magic.generate(0x102, "End_to_end_transit_delay", "ISDN.InformationElement.End_to_end_transit_delay"),
        Transit_delay_selection_and_indication: tester_magic.generate(0x103, "Transit_delay_selection_and_indication", "ISDN.InformationElement.Transit_delay_selection_and_indication"),
        Packet_layer_binary_parameters: tester_magic.generate(0x104, "Packet_layer_binary_parameters", "ISDN.InformationElement.Packet_layer_binary_parameters"),
        Packet_layer_window_size: tester_magic.generate(0x105, "Packet_layer_window_size", "ISDN.InformationElement.Packet_layer_window_size"),
        Packet_size: tester_magic.generate(0x106, "Packet_size", "ISDN.InformationElement.Packet_size"),
        Closed_user_group: tester_magic.generate(0x107, "Closed_user_group", "ISDN.InformationElement.Closed_user_group"),
        Reverse_charging_indication: tester_magic.generate(0x112, "Reverse_charging_indication", "ISDN.InformationElement.Reverse_charging_indication"),
        Calling_party_number: tester_magic.generate(0x154, "Calling_party_number", "ISDN.InformationElement.Calling_party_number"),
        Calling_party_subaddress: tester_magic.generate(0x155, "Calling_party_subaddress", "ISDN.InformationElement.Calling_party_subaddress"),
        Called_party_number: tester_magic.generate(0x160, "Called_party_number", "ISDN.InformationElement.Called_party_number"),
        Called_party_subaddress: tester_magic.generate(0x161, "Called_party_subaddress", "ISDN.InformationElement.Called_party_subaddress"),
        Redirecting_number: tester_magic.generate(0x164, "Redirecting_number", "ISDN.InformationElement.Redirecting_number"),
        Transit_network_selection: tester_magic.generate(0x170, "Transit_network_selection", "ISDN.InformationElement.Transit_network_selection"),
        Restart_indicator: tester_magic.generate(0x171, "Restart_indicator", "ISDN.InformationElement.Restart_indicator"),
        Low_layer_compatibility: tester_magic.generate(0x174, "Low_layer_compatibility", "ISDN.InformationElement.Low_layer_compatibility"),
        High_layer_compatibility: tester_magic.generate(0x175, "High_layer_compatibility", "ISDN.InformationElement.High_layer_compatibility"),
        User_user: tester_magic.generate(0x176, "User_user", "ISDN.InformationElement.User_user"),
        Escape_for_extension: tester_magic.generate(0x177, "Escape_for_extension", "ISDN.InformationElement.Escape_for_extension"),
    },
    TypeOfNumber: {
        Unknown: tester_magic.generate(0x0, "Unknown", "ISDN.TypeOfNumber.Unknown"),
        International_Number: tester_magic.generate(0x1, "International_Number", "ISDN.TypeOfNumber.International_Number"),
        National_Number: tester_magic.generate(0x2, "National_Number", "ISDN.TypeOfNumber.National_Number"),
        Network_Specific_Number: tester_magic.generate(0x3, "Network_Specific_Number", "ISDN.TypeOfNumber.Network_Specific_Number"),
        Subscriber_Number: tester_magic.generate(0x4, "Subscriber_Number", "ISDN.TypeOfNumber.Subscriber_Number"),
        Abbreviated_Number: tester_magic.generate(0x6, "Abbreviated_Number", "ISDN.TypeOfNumber.Abbreviated_Number"),
        Reserved_for_extension: tester_magic.generate(0x7, "Reserved_for_extension", "ISDN.TypeOfNumber.Reserved_for_extension"),
    },
    NumberingPlan: {
        Unknown: tester_magic.generate(0x0, "Unknown", "ISDN.NumberingPlan.Unknown"),
        ISDN_numbering_plan_Recommendation_E_164: tester_magic.generate(0x1, "ISDN_numbering_plan_Recommendation_E_164", "ISDN.NumberingPlan.ISDN_numbering_plan_Recommendation_E_164"),
        Data_numbering_plan_Recommendation_X_121: tester_magic.generate(0x3, "Data_numbering_plan_Recommendation_X_121", "ISDN.NumberingPlan.Data_numbering_plan_Recommendation_X_121"),
        Telex_numbering_plan_Recomendation_F_69: tester_magic.generate(0x4, "Telex_numbering_plan_Recomendation_F_69", "ISDN.NumberingPlan.Telex_numbering_plan_Recomendation_F_69"),
        National_standard_Numbering_Plan: tester_magic.generate(0x8, "National_standard_Numbering_Plan", "ISDN.NumberingPlan.National_standard_Numbering_Plan"),
        Private_numbering_plan: tester_magic.generate(0x9, "Private_numbering_plan", "ISDN.NumberingPlan.Private_numbering_plan"),
        Reserved_for_extension: tester_magic.generate(0xF, "Reserved_for_extension", "ISDN.NumberingPlan.Reserved_for_extension"),
    },
    PresentationIndicator: {
        Presentation_allowed: tester_magic.generate(0x0, "Presentation_allowed", "ISDN.PresentationIndicator.Presentation_allowed"),
        Presentation_restricted: tester_magic.generate(0x1, "Presentation_restricted", "ISDN.PresentationIndicator.Presentation_restricted"),
        Number_not_available_due_to_interworking: tester_magic.generate(0x2, "Number_not_available_due_to_interworking", "ISDN.PresentationIndicator.Number_not_available_due_to_interworking"),
        Reserved: tester_magic.generate(0x3, "Reserved", "ISDN.PresentationIndicator.Reserved"),
    },
    ScreeningIndicator: {
        User_provided_Not_screened: tester_magic.generate(0x0, "User_provided_Not_screened", "ISDN.ScreeningIndicator.User_provided_Not_screened"),
        User_provided_Verified_and_passed: tester_magic.generate(0x1, "User_provided_Verified_and_passed", "ISDN.ScreeningIndicator.User_provided_Verified_and_passed"),
        User_provided_Verified_and_failed: tester_magic.generate(0x2, "User_provided_Verified_and_failed", "ISDN.ScreeningIndicator.User_provided_Verified_and_failed"),
        Network_provided: tester_magic.generate(0x3, "Network_provided", "ISDN.ScreeningIndicator.Network_provided"),
    },
    RedirectingIndicator: {
        Uunknown: tester_magic.generate(0, "Uunknown", "ISDN.RedirectingIndicator.Uunknown"),
        User_Busy: tester_magic.generate(1, "User_Busy", "ISDN.RedirectingIndicator.User_Busy"),
        No_Reply: tester_magic.generate(2, "No_Reply", "ISDN.RedirectingIndicator.No_Reply"),
        Unconditional: tester_magic.generate(3, "Unconditional", "ISDN.RedirectingIndicator.Unconditional"),
        Deflection_During_Alerting: tester_magic.generate(4, "Deflection_During_Alerting", "ISDN.RedirectingIndicator.Deflection_During_Alerting"),
        Deflection_Immediate_Response: tester_magic.generate(5, "Deflection_Immediate_Response", "ISDN.RedirectingIndicator.Deflection_Immediate_Response"),
        MS_Not_Reachable: tester_magic.generate(6, "MS_Not_Reachable", "ISDN.RedirectingIndicator.MS_Not_Reachable"),
    },
    CauseCode: {
        Unallocated__unassigned__number: tester_magic.generate(1, "Unallocated__unassigned__number", "ISDN.CauseCode.Unallocated__unassigned__number"),
        No_route_to_specified_transit_network: tester_magic.generate(2, "No_route_to_specified_transit_network", "ISDN.CauseCode.No_route_to_specified_transit_network"),
        No_route_to_destination: tester_magic.generate(3, "No_route_to_destination", "ISDN.CauseCode.No_route_to_destination"),
        Send_special_information_tone: tester_magic.generate(4, "Send_special_information_tone", "ISDN.CauseCode.Send_special_information_tone"),
        Misdialed_trunk_prefix: tester_magic.generate(5, "Misdialed_trunk_prefix", "ISDN.CauseCode.Misdialed_trunk_prefix"),
        channel_unacceptable: tester_magic.generate(6, "channel_unacceptable", "ISDN.CauseCode.channel_unacceptable"),
        Call_awarded_and_being_delivered_in_an_established_channel: tester_magic.generate(7, "Call_awarded_and_being_delivered_in_an_established_channel", "ISDN.CauseCode.Call_awarded_and_being_delivered_in_an_established_channel"),
        Preemption: tester_magic.generate(8, "Preemption", "ISDN.CauseCode.Preemption"),
        Preemption__circuit_reserved_for_reuse: tester_magic.generate(9, "Preemption__circuit_reserved_for_reuse", "ISDN.CauseCode.Preemption__circuit_reserved_for_reuse"),
        Normal_call_clearing: tester_magic.generate(16, "Normal_call_clearing", "ISDN.CauseCode.Normal_call_clearing"),
        User_busy: tester_magic.generate(17, "User_busy", "ISDN.CauseCode.User_busy"),
        No_user_responding: tester_magic.generate(18, "No_user_responding", "ISDN.CauseCode.No_user_responding"),
        No_answer_from_user__user_alerted: tester_magic.generate(19, "No_answer_from_user__user_alerted", "ISDN.CauseCode.No_answer_from_user__user_alerted"),
        Subscriber_absent: tester_magic.generate(20, "Subscriber_absent", "ISDN.CauseCode.Subscriber_absent"),
        Call_rejected: tester_magic.generate(21, "Call_rejected", "ISDN.CauseCode.Call_rejected"),
        Number_changed: tester_magic.generate(22, "Number_changed", "ISDN.CauseCode.Number_changed"),
        Non_selected_user_clearing: tester_magic.generate(26, "Non_selected_user_clearing", "ISDN.CauseCode.Non_selected_user_clearing"),
        Destination_out_of_order: tester_magic.generate(27, "Destination_out_of_order", "ISDN.CauseCode.Destination_out_of_order"),
        Invalid_number_format__address_incomplete: tester_magic.generate(28, "Invalid_number_format__address_incomplete", "ISDN.CauseCode.Invalid_number_format__address_incomplete"),
        Facility_rejected: tester_magic.generate(29, "Facility_rejected", "ISDN.CauseCode.Facility_rejected"),
        Response_to_STATUS_INQUIRY: tester_magic.generate(30, "Response_to_STATUS_INQUIRY", "ISDN.CauseCode.Response_to_STATUS_INQUIRY"),
        Normal__unspecified: tester_magic.generate(31, "Normal__unspecified", "ISDN.CauseCode.Normal__unspecified"),
        No_circuit_channel_available: tester_magic.generate(34, "No_circuit_channel_available", "ISDN.CauseCode.No_circuit_channel_available"),
        Network_out_of_order: tester_magic.generate(38, "Network_out_of_order", "ISDN.CauseCode.Network_out_of_order"),
        Permanent_frame_mode_connection_out_of_service: tester_magic.generate(39, "Permanent_frame_mode_connection_out_of_service", "ISDN.CauseCode.Permanent_frame_mode_connection_out_of_service"),
        Permanent_frame_mode_connection_operational: tester_magic.generate(40, "Permanent_frame_mode_connection_operational", "ISDN.CauseCode.Permanent_frame_mode_connection_operational"),
        Temporary_failure: tester_magic.generate(41, "Temporary_failure", "ISDN.CauseCode.Temporary_failure"),
        Switching_equipment_congestion: tester_magic.generate(42, "Switching_equipment_congestion", "ISDN.CauseCode.Switching_equipment_congestion"),
        Access_information_discarded: tester_magic.generate(43, "Access_information_discarded", "ISDN.CauseCode.Access_information_discarded"),
        Requested_circuit_channel_not_available: tester_magic.generate(44, "Requested_circuit_channel_not_available", "ISDN.CauseCode.Requested_circuit_channel_not_available"),
        Precedence_call_blocked: tester_magic.generate(46, "Precedence_call_blocked", "ISDN.CauseCode.Precedence_call_blocked"),
        Resource_unavailable__unspecified: tester_magic.generate(47, "Resource_unavailable__unspecified", "ISDN.CauseCode.Resource_unavailable__unspecified"),
        Quality_of_Service_not_available: tester_magic.generate(49, "Quality_of_Service_not_available", "ISDN.CauseCode.Quality_of_Service_not_available"),
        Requested_facility_not_subscribed: tester_magic.generate(50, "Requested_facility_not_subscribed", "ISDN.CauseCode.Requested_facility_not_subscribed"),
        Outgoing_calls_barred_within_CUG: tester_magic.generate(53, "Outgoing_calls_barred_within_CUG", "ISDN.CauseCode.Outgoing_calls_barred_within_CUG"),
        Incoming_calls_barred_within_CUG: tester_magic.generate(55, "Incoming_calls_barred_within_CUG", "ISDN.CauseCode.Incoming_calls_barred_within_CUG"),
        Bearer_capability_not_authorized: tester_magic.generate(57, "Bearer_capability_not_authorized", "ISDN.CauseCode.Bearer_capability_not_authorized"),
        Bearer_capability_not_presently_available: tester_magic.generate(58, "Bearer_capability_not_presently_available", "ISDN.CauseCode.Bearer_capability_not_presently_available"),
        Inconsistency_in_designated_outgoing_access_information_and_subscriber_class: tester_magic.generate(62, "Inconsistency_in_designated_outgoing_access_information_and_subscriber_class", "ISDN.CauseCode.Inconsistency_in_designated_outgoing_access_information_and_subscriber_class"),
        Service_or_option_not_available__unspecified: tester_magic.generate(63, "Service_or_option_not_available__unspecified", "ISDN.CauseCode.Service_or_option_not_available__unspecified"),
        Bearer_capability_not_implemented: tester_magic.generate(65, "Bearer_capability_not_implemented", "ISDN.CauseCode.Bearer_capability_not_implemented"),
        Channel_type_not_implemented: tester_magic.generate(66, "Channel_type_not_implemented", "ISDN.CauseCode.Channel_type_not_implemented"),
        Requested_facility_not_implemented: tester_magic.generate(69, "Requested_facility_not_implemented", "ISDN.CauseCode.Requested_facility_not_implemented"),
        Only_restricted_digital_information_bearer_capability_is_available: tester_magic.generate(70, "Only_restricted_digital_information_bearer_capability_is_available", "ISDN.CauseCode.Only_restricted_digital_information_bearer_capability_is_available"),
        Service_or_option_not_implemented__unspecified: tester_magic.generate(79, "Service_or_option_not_implemented__unspecified", "ISDN.CauseCode.Service_or_option_not_implemented__unspecified"),
        Invalid_call_reference_value: tester_magic.generate(81, "Invalid_call_reference_value", "ISDN.CauseCode.Invalid_call_reference_value"),
        Identified_channel_does_not_exist: tester_magic.generate(82, "Identified_channel_does_not_exist", "ISDN.CauseCode.Identified_channel_does_not_exist"),
        A_suspended_call_exists__but_this_call_identify_does_not: tester_magic.generate(83, "A_suspended_call_exists__but_this_call_identify_does_not", "ISDN.CauseCode.A_suspended_call_exists__but_this_call_identify_does_not"),
        Call_identity_in_use: tester_magic.generate(84, "Call_identity_in_use", "ISDN.CauseCode.Call_identity_in_use"),
        No_call_suspended: tester_magic.generate(85, "No_call_suspended", "ISDN.CauseCode.No_call_suspended"),
        Call_having_the_requested_call_identity_has_been_cleared: tester_magic.generate(86, "Call_having_the_requested_call_identity_has_been_cleared", "ISDN.CauseCode.Call_having_the_requested_call_identity_has_been_cleared"),
        User_not_member_of_CUG: tester_magic.generate(87, "User_not_member_of_CUG", "ISDN.CauseCode.User_not_member_of_CUG"),
        Incompatible_destination: tester_magic.generate(88, "Incompatible_destination", "ISDN.CauseCode.Incompatible_destination"),
        Non_existent_CUG: tester_magic.generate(90, "Non_existent_CUG", "ISDN.CauseCode.Non_existent_CUG"),
        Invalid_transit_network_selection: tester_magic.generate(91, "Invalid_transit_network_selection", "ISDN.CauseCode.Invalid_transit_network_selection"),
        Invalid_message__unspecified: tester_magic.generate(95, "Invalid_message__unspecified", "ISDN.CauseCode.Invalid_message__unspecified"),
        Mandatory_information_element_is_missing: tester_magic.generate(96, "Mandatory_information_element_is_missing", "ISDN.CauseCode.Mandatory_information_element_is_missing"),
        Message_type_non_existent_or_not_implemented: tester_magic.generate(97, "Message_type_non_existent_or_not_implemented", "ISDN.CauseCode.Message_type_non_existent_or_not_implemented"),
        Message_not_compatible_with_call_state_or_message_type_non_existent_or_not_implemented: tester_magic.generate(98, "Message_not_compatible_with_call_state_or_message_type_non_existent_or_not_implemented", "ISDN.CauseCode.Message_not_compatible_with_call_state_or_message_type_non_existent_or_not_implemented"),
        Information_element_parameter_non_existent_or_not_implemented: tester_magic.generate(99, "Information_element_parameter_non_existent_or_not_implemented", "ISDN.CauseCode.Information_element_parameter_non_existent_or_not_implemented"),
        Invalid_information_element_contents: tester_magic.generate(100, "Invalid_information_element_contents", "ISDN.CauseCode.Invalid_information_element_contents"),
        Message_not_compatible_with_call_state: tester_magic.generate(101, "Message_not_compatible_with_call_state", "ISDN.CauseCode.Message_not_compatible_with_call_state"),
        Recovery_on_timer_expiry: tester_magic.generate(102, "Recovery_on_timer_expiry", "ISDN.CauseCode.Recovery_on_timer_expiry"),
        Parameter_non_existent_or_not_implemented__passed_on: tester_magic.generate(103, "Parameter_non_existent_or_not_implemented__passed_on", "ISDN.CauseCode.Parameter_non_existent_or_not_implemented__passed_on"),
        Message_with_unrecognized_parameter__discarded: tester_magic.generate(110, "Message_with_unrecognized_parameter__discarded", "ISDN.CauseCode.Message_with_unrecognized_parameter__discarded"),
        Protocol_error__unspecified: tester_magic.generate(111, "Protocol_error__unspecified", "ISDN.CauseCode.Protocol_error__unspecified"),
        Interworking__unspecified: tester_magic.generate(127, "Interworking__unspecified", "ISDN.CauseCode.Interworking__unspecified"),
    },
};

Object.values(ISDN).forEach(obj => {
    Object.values(obj).forEach(magicObj => {
        obj[magicObj.id] = magicObj;
    });
});

function createProxy(obj, path = 'ISDN') {
    return new Proxy(obj, {
        get(target, prop) {
            if (prop in target) {
                const value = target[prop];
                if (typeof value === 'object' && value !== null && !value.__tester_magic__) {
                    return createProxy(value, `${path}.${String(prop)}`);
                }
                return value;
            } else {
                throw new Error(`${path}.${String(prop)} is invalid`);
            }
        }
    });
}

module.exports = createProxy(ISDN);